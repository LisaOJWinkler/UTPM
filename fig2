base=Make_Graphs(1,2030,2035,20,15,1400,20,20,0,china=1,elec=3).num_of_evs()
base_2030=Make_Graphs(1,2030,2035,20,15,1400,20,20,0,china=0,elec=7).num_of_evs()
base_2040=Make_Graphs(1,2030,2035,20,15,1400,20,20,0,china=0,elec=5).num_of_evs()
base_eu=Make_Graphs(1,2030,2035,20,15,1400,20,20,0,china=0,elec=3).num_of_evs()
third_rf=Make_Graphs(1,2030,2035,20,15,1400,20,20,0.33,1,3).num_of_evs()
twelv=Make_Graphs(1,2030,2035,20,15,1200,20,20,0,1,3).num_of_evs()
ten=Make_Graphs(1,2030,2035,20,15,1000,20,20,0,1,3).num_of_evs()
eight=Make_Graphs(1,2030,2035,20,15,800,20,20,0,1,3).num_of_evs()
d4343=Make_Graphs(1,2030,2035,20,15,1400,-42.99,-42.99,0,1,3).num_of_evs()
d6666=Make_Graphs(1,2030,2035,20,15,1400,-66,-66,0,1,3).num_of_evs()
d8181=Make_Graphs(1,2030,2035,20,15,1400,-81,-81,0,1,3).num_of_evs()
p2525=Make_Graphs(1,2025,2025,20,15,1400,20,20,0,1,3).num_of_evs()
p3030=Make_Graphs(1,2030,2030,20,15,1400,20,20,0,1,3).num_of_evs()
early=Make_Graphs(1,2030,2035,15,10,1400,20,20,0,1,3).num_of_evs()
late=Make_Graphs(1,2030,2035,25,20,1400,20,20,0,1,3).num_of_evs()
opt=Make_Graphs(1,2025,2025,15,10,800,-81,-81,0.33,china=0,elec=7).num_of_evs()
mts=Make_Graphs(1,2030,2030,20,15,1400,-43,-43,0,china=1,elec=3).num_of_evs()

#optimal has no late scrapping
#cars drive same distance

from IPython.display import Markdown, display
def printmd(string):
    display(Markdown(string))

#x=["Reference Case (average car mass = 1400kg, \n 2030 fossil fuel phase-out, 15 year scrap age)","Reducing the average mass of cars by 200kg","by 400kg","Banning sale of \n fossil fuels in 2025",
  # "Reducing miles driven in London by 10%","by 20%","Scrap polluting \n vehicles after 10 years"]
x=["Baseline","Fossil Fuel Phase-Out: 2030", "2025","Light-weighting: 1200kg",
   "1000kg","800kg", "Retrofitting: 33%","EV Manufacture in EU with:\n'Net-Zero' Electricity by: 2050","2040","2030",
   "Local Transport Strategy","Modal Shift: -43%","-66%","-81%","Combined","Carbon Budget if Historical\nShare Continues"]

electric=[base[7][-1],p3030[7][-1],p2525[7][-1],twelv[7][-1],ten[7][-1],eight[7][-1],third_rf[7][-1],base_eu[7][-1],base_2040[7][-1],base_2030[7][-1],mts[7][-1],d4343[7][-1],d6666[7][-1],d8181[7][-1],opt[7][-1],0]
elec=((np.array(electric)))

tailpipe=[base[8][-1],p3030[8][-1],p2525[8][-1],twelv[8][-1],ten[8][-1],eight[8][-1],third_rf[8][-1],base_eu[8][-1],base_2040[8][-1],base_2030[8][-1],mts[8][-1],d4343[8][-1],d6666[8][-1],d8181[8][-1],opt[8][-1],0]
tail=((np.array(tailpipe)))

ev_prod=[base[9][-1],p3030[9][-1],p2525[9][-1],twelv[9][-1],ten[9][-1],eight[9][-1],third_rf[9][-1],base_eu[9][-1],base_2040[9][-1],base_2030[9][-1],mts[9][-1],d4343[9][-1],d6666[9][-1],d8181[9][-1],opt[9][-1],0]
ev=((np.array(ev_prod)))

ice_prod=[base[10][-1],p3030[10][-1],p2525[10][-1],twelv[10][-1],ten[10][-1],eight[10][-1],third_rf[10][-1],base_eu[10][-1],base_2040[10][-1],base_2030[10][-1],mts[10][-1],d4343[10][-1],d6666[10][-1],d8181[10][-1],opt[10][-1],0]
ice=((np.array(ice_prod)))

converted=[base[11][-1],p3030[11][-1],p2525[11][-1],twelv[11][-1],ten[11][-1],eight[11][-1],third_rf[11][-1],base_eu[11][-1],base_2040[11][-1],base_2030[11][-1],mts[11][-1],d4343[11][-1],d6666[11][-1],d8181[11][-1],opt[11][-1],0]
conv=((np.array(converted)))

pub_tran=[base[12][-1],p3030[12][-1],p2525[12][-1],twelv[12][-1],ten[12][-1],eight[12][-1],third_rf[12][-1],base_eu[12][-1],base_2040[12][-1],base_2030[12][-1],mts[12][-1],d4343[12][-1],d6666[12][-1],d8181[12][-1],opt[12][-1],0]
pb=((np.array(pub_tran)))

#per=((elec+tail+ev+ice+conv-(base[6][-1]+base[7][-1]+base[8][-1]+base[9][-1]+base[10][-1]))/(base[6][-1]+base[7][-1]+base[8][-1]+base[9][-1]+base[10][-1]))*100

#it's now actually 6,7,8,9,10 (10 is extra bar (choose a colour?) for converted/retrofitted emissions)

carbon_budg=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21.7]
cb=((np.array(carbon_budg)))

electric1=[base[19][-1],base_2040[19][-1],base_2030[19][-1],p3030[19][-1],p2525[19][-1],twelv[19][-1],ten[19][-1],eight[19][-1],third_rf[19][-1],base_eu[19][-1],mts[19][-1],d4343[19][-1],d6666[19][-1],d8181[19][-1],opt[19][-1],0]
elec1=((np.array(electric1)))

tailpipe1=[base[20][-1],base_2040[20][-1],base_2030[20][-1],p3030[20][-1],p2525[20][-1],twelv[20][-1],ten[20][-1],eight[20][-1],third_rf[20][-1],base_eu[20][-1],mts[20][-1],d4343[20][-1],d6666[20][-1],d8181[20][-1],opt[20][-1],0]
tail1=((np.array(tailpipe1)))

ev_prod1=[base[21][-1],base_2040[21][-1],base_2030[21][-1],p3030[21][-1],p2525[21][-1],twelv[21][-1],ten[21][-1],eight[21][-1],third_rf[21][-1],base_eu[21][-1],mts[21][-1],d4343[21][-1],d6666[21][-1],d8181[21][-1],opt[21][-1],0]
ev1=((np.array(ev_prod1)))

ice_prod1=[base[22][-1],base_2040[22][-1],base_2030[22][-1],p3030[22][-1],p2525[22][-1],twelv[22][-1],ten[22][-1],eight[22][-1],third_rf[22][-1],base_eu[22][-1],mts[22][-1],d4343[22][-1],d6666[22][-1],d8181[22][-1],opt[22][-1],0]
ice1=((np.array(ice_prod1)))

converted1=[base[23][-1],base_2040[23][-1],base_2030[23][-1],p3030[23][-1],p2525[23][-1],twelv[23][-1],ten[23][-1],eight[23][-1],third_rf[23][-1],base_eu[23][-1],mts[23][-1],d4343[23][-1],d6666[23][-1],d8181[23][-1],opt[23][-1],0]
conv1=((np.array(converted1)))

pub_tran1=[base[24][-1],base_2040[24][-1],base_2030[24][-1],p3030[24][-1],p2525[24][-1],twelv[24][-1],ten[24][-1],eight[24][-1],third_rf[24][-1],base_eu[24][-1],mts[24][-1],d4343[24][-1],d6666[24][-1],d8181[24][-1],opt[24][-1],0]
pb1=((np.array(pub_tran1)))


per=((elec+tail+ev+ice+conv+pb-(base[6][-1]+base[7][-1]+base[8][-1]+base[9][-1]+base[10][-1]))/(base[6][-1]+base[7][-1]+base[8][-1]+base[9][-1]+base[10][-1]))*100
per1=((elec1+tail1+ev1+ice1+conv1+pb1-(base[19][-1]+base[20][-1]+base[21][-1]+base[22][-1]+base[23][-1]))/(base[19][-1]+base[20][-1]+base[21][-1]+base[22][-1]+base[23][-1]))*100


fig, axs = plt.subplots(1,2,figsize=(14,9),sharey=True,sharex=False, gridspec_kw={'width_ratios': [3, 1]})

# horizontal space between axes
fig.subplots_adjust(wspace=0.05)

#plt.figure(figsize=(7,9))
#plt.grid(axis='x')
pos = [0,1.6,2.4,3.8,4.4,5,6.5,8.2,9.3,10.2,12,13.6,14.2,14.8,16.2,18]
width = [1,0.75,0.75,0.5,0.5,0.5,1,1,0.75,0.75,1,0.5,0.5,0.5,1,1]
error=np.random.rand(8)

axs[0].barh(pos,elec,width,color=['black'], align='center',label='Electricity')
axs[0].barh(pos,tail,width,elec,color=['tab:blue'], align='center',label='Tailpipe')
axs[0].barh(pos,ev,width,elec+tail,color=['tab:red'], align='center',label='EV Embedded')
axs[0].barh(pos,ice,width,elec+tail+ev,color=['tab:orange'], align='center',label='ICE Embedded')
axs[0].barh(pos,conv,width,elec+tail+ev+ice,color=['tab:purple'], align='center',label='Retrofit Embedded')
axs[0].barh(pos,cb,width,elec+tail+ev+ice+conv,color=['tab:green'], align='center')
axs[0].barh(pos,pb,width,elec+tail+ev+ice+conv+cb,color=['grey'], align='center',label='Replacement Mode',edgecolor='grey',alpha=0.3,linewidth=1.5,linestyle='--')

axs[0].legend(bbox_to_anchor=(0.63,0.32), prop={'size': 14})
axs[0].set_xlim(0,180)
axs[0].set_ylim(-1,19)
axs[0].grid(axis='x')
axs[0].set_xlabel('Cumulative Emissions up to 2050 (MtCO$_{2eq}$)')
axs[0].invert_yaxis()
#axs[0].set_yticks(pos,x)
axs[0].set_yticks(pos)
axs[0].set_yticklabels(x)
axs[0].invert_yaxis()
axs[0].plot([(base[6][-1]+base[7][-1]+base[8][-1]+base[9][-1]+base[10][-1]), (base[6][-1]+base[7][-1]+base[8][-1]+base[9][-1]+base[10][-1])], [-2,24], "k--")
axs[0].plot([21.7,21.7], [-2,24], "k--",color='black')


#plt.yticks(pos,x)
#plt.ylim(-1,19)
#plt.xlim(0,180)
#plt.xlabel("Cumulative Emissions up to 2050 (MtCO$_{2eq}$)")
#plt.
#plt.plot([(base[6][-1]+base[7][-1]+base[8][-1]+base[9][-1]+base[10][-1]), (base[6][-1]+base[7][-1]+base[8][-1]+base[9][-1]+base[10][-1])], [-2,24], "k--")
#plt.plot([31,31], [-2,24], "k--",color='black')
#plt.legend(bbox_to_anchor=(0.8, 0.2), prop={'size': 12})

axs[1].barh(pos,elec1,width,color=['black'], align='center',label='Electricity')
axs[1].barh(pos,tail1,width,elec1,color=['tab:blue'], align='center',label='Tailpipe')
axs[1].barh(pos,ev1,width,elec1+tail1,color=['tab:red'], align='center',label='EV Embedded')
axs[1].barh(pos,ice1,width,elec1+tail1+ev1,color=['tab:orange'], align='center',label='ICE Embedded')
axs[1].barh(pos,conv1,width,elec1+tail1+ev1+ice1,color=['tab:purple'], align='center',label='Retrofit Embedded')
axs[1].barh(pos,pb1,width,elec1+tail1+ev1+ice1+conv1,color=['grey'], align='center',label='Replacement Mode',edgecolor='grey',alpha=0.3,linewidth=1.5,linestyle='--')

#axs[0].set_xlim(0,180)
#axs[0].set_ylim(-1,19)
axs[1].grid(axis='x')
axs[1].set_xlabel('Cumulative Energy\nDemand up to 2050 (MJ)')
#axs[1].invert_yaxis()
#axs[0].set_yticks(pos,x)
axs[1].set_yticks(pos)
axs[1].set_yticklabels(x)
axs[1].plot([(base[19][-1]+base[20][-1]+base[21][-1]+base[22][-1]+base[23][-1]), (base[19][-1]+base[20][-1]+base[21][-1]+base[22][-1]+base[23][-1])], [-2,24], "k--")



for i, v in enumerate(elec+tail+ev+ice+conv+pb):
    if i<15:
        axs[0].text(v-21,pos[i]+0.25, '{:.1f}%'.format(per[i]))
        #plt.text(130,pos[i]+0.1, '{:.1f}%'.format(per[i]))
        #v+1

for i, v in enumerate(elec1+tail1+ev1+ice1+conv1+pb1):
    if i<15:
        axs[1].text(v-600000000000,pos[i]+0.25, '{:.1f}%'.format(per1[i]))
        #plt.text(130,pos[i]+0.1, '{:.1f}%'.format(per[i]))
        #v+1        
        
plt.gca().invert_yaxis()
plt.savefig("change_in_emissions2.pdf", bbox_inches='tight')
plt.show()
